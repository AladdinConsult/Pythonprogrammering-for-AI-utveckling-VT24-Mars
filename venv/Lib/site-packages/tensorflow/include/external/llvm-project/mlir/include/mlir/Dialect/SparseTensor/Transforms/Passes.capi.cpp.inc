/* Autogenerated by mlir-tblgen; don't manually edit. */
//===----------------------------------------------------------------------===//
// SparseTensor Group Registration
//===----------------------------------------------------------------------===//

void mlirRegisterSparseTensorPasses(void) {
  registerSparseTensorPasses();
}

MlirPass mlirCreateSparseTensorLowerForeachToSCF(void) {
  return wrap(mlir::createLowerForeachToSCFPass().release());
}
void mlirRegisterSparseTensorLowerForeachToSCF(void) {
  registerLowerForeachToSCF();
}


MlirPass mlirCreateSparseTensorLowerSparseOpsToForeach(void) {
  return wrap(mlir::createLowerSparseOpsToForeachPass().release());
}
void mlirRegisterSparseTensorLowerSparseOpsToForeach(void) {
  registerLowerSparseOpsToForeach();
}


MlirPass mlirCreateSparseTensorPreSparsificationRewrite(void) {
  return wrap(mlir::createPreSparsificationRewritePass().release());
}
void mlirRegisterSparseTensorPreSparsificationRewrite(void) {
  registerPreSparsificationRewrite();
}


MlirPass mlirCreateSparseTensorSparseAssembler(void) {
  return wrap(mlir::createSparseAssembler().release());
}
void mlirRegisterSparseTensorSparseAssembler(void) {
  registerSparseAssembler();
}


MlirPass mlirCreateSparseTensorSparseBufferRewrite(void) {
  return wrap(mlir::createSparseBufferRewritePass().release());
}
void mlirRegisterSparseTensorSparseBufferRewrite(void) {
  registerSparseBufferRewrite();
}


MlirPass mlirCreateSparseTensorSparseGPUCodegen(void) {
  return wrap(mlir::createSparseGPUCodegenPass().release());
}
void mlirRegisterSparseTensorSparseGPUCodegen(void) {
  registerSparseGPUCodegen();
}


MlirPass mlirCreateSparseTensorSparseReinterpretMap(void) {
  return wrap(mlir::createSparseReinterpretMapPass().release());
}
void mlirRegisterSparseTensorSparseReinterpretMap(void) {
  registerSparseReinterpretMap();
}


MlirPass mlirCreateSparseTensorSparseTensorCodegen(void) {
  return wrap(mlir::createSparseTensorCodegenPass().release());
}
void mlirRegisterSparseTensorSparseTensorCodegen(void) {
  registerSparseTensorCodegen();
}


MlirPass mlirCreateSparseTensorSparseTensorConversionPass(void) {
  return wrap(mlir::createSparseTensorConversionPass().release());
}
void mlirRegisterSparseTensorSparseTensorConversionPass(void) {
  registerSparseTensorConversionPass();
}


MlirPass mlirCreateSparseTensorSparseVectorization(void) {
  return wrap(mlir::createSparseVectorizationPass().release());
}
void mlirRegisterSparseTensorSparseVectorization(void) {
  registerSparseVectorization();
}


MlirPass mlirCreateSparseTensorSparsificationAndBufferization(void) {
  return wrap(mlir::createSparsificationAndBufferizationPass().release());
}
void mlirRegisterSparseTensorSparsificationAndBufferization(void) {
  registerSparsificationAndBufferization();
}


MlirPass mlirCreateSparseTensorSparsificationPass(void) {
  return wrap(mlir::createSparsificationPass().release());
}
void mlirRegisterSparseTensorSparsificationPass(void) {
  registerSparsificationPass();
}


MlirPass mlirCreateSparseTensorStageSparseOperations(void) {
  return wrap(mlir::createStageSparseOperationsPass().release());
}
void mlirRegisterSparseTensorStageSparseOperations(void) {
  registerStageSparseOperations();
}


MlirPass mlirCreateSparseTensorStorageSpecifierToLLVM(void) {
  return wrap(mlir::createStorageSpecifierToLLVMPass().release());
}
void mlirRegisterSparseTensorStorageSpecifierToLLVM(void) {
  registerStorageSpecifierToLLVM();
}

